#pragma checksum "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d8928a581674271b6f493a86909d6b15b567d515"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ImportExport_Index), @"mvc.1.0.view", @"/Views/ImportExport/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\_ViewImports.cshtml"
using Ecom;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\_ViewImports.cshtml"
using Ecom.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8928a581674271b6f493a86909d6b15b567d515", @"/Views/ImportExport/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8f590f90d6d197def03301032e200ac8485fb047", @"/Views/_ViewImports.cshtml")]
    public class Views_ImportExport_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Product>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
  
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Import/Export Products";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container-fluid"">
    <h2>Import/Export Products</h2>

    <!-- Simple Action Buttons -->
    <div class=""row mb-4"">
        <div class=""col-md-12"">
            <div class=""btn-group"" role=""group"">
                <button type=""button"" class=""btn btn-success"" onclick=""exportToXML()"">
                    Export to XML
                </button>
                <button type=""button"" class=""btn btn-primary"" onclick=""document.getElementById('xmlFileInput').click()"">
                    Import from XML
                </button>
            </div>

            <!-- Hidden file input -->
            <input type=""file"" id=""xmlFileInput"" accept="".xml"" style=""display: none;"" onchange=""handleFileSelect(this)"">

            <!-- Selected file display -->
            <div id=""selectedFileInfo"" class=""mt-2"" style=""display: none;"">
                <small>Selected: <span id=""selectedFileName""></span></small>
                <button type=""button"" class=""btn btn-sm btn-outline-primary ms-2"" on");
            WriteLiteral(@"click=""importFromXML()"">
                    Import Now
                </button>
                <button type=""button"" class=""btn btn-sm btn-outline-secondary ms-1"" onclick=""clearFileSelection()"">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    <div id=""statusMessage"" class=""alert"" style=""display: none;"">
        <div id=""statusContent""></div>
    </div>

    <!-- Products List -->
    <div class=""card"">
        <div class=""card-header"">
            <h5>Products (");
#nullable restore
#line 47 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                     Write(Model.Count);

#line default
#line hidden
#nullable disable
            WriteLiteral(")</h5>\r\n        </div>\r\n        <div class=\"card-body\">\r\n");
#nullable restore
#line 50 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
             if (Model.Any())
            {

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                <div class=""table-responsive"">
                    <table class=""table table-striped"">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Category</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
");
#nullable restore
#line 65 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                             foreach (var product in Model)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                <tr>\r\n                                    <td>");
#nullable restore
#line 68 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                   Write(product.ProductID);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                    <td>\r\n                                        ");
#nullable restore
#line 70 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                   Write(product.ProductName);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 71 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                         if (!string.IsNullOrEmpty(product.Description))
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <br><small class=\"text-muted\">");
#nullable restore
#line 73 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                                                      Write(product.Description.Length > 30 ? product.Description.Substring(0, 30) + "..." : product.Description);

#line default
#line hidden
#nullable disable
            WriteLiteral("</small>\r\n");
#nullable restore
#line 74 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </td>\r\n                                    <td>");
#nullable restore
#line 76 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                    Write(product.CategoryName ?? "No Category");

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                    <td>$");
#nullable restore
#line 77 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                    Write(product.Price.ToString("F2"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                    <td>");
#nullable restore
#line 78 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                   Write(product.Stock);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                    <td>\r\n");
#nullable restore
#line 80 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                         if (product.Visible)
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <span class=\"badge bg-success\">Visible</span>\r\n");
#nullable restore
#line 83 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                        }
                                        else
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <span class=\"badge bg-secondary\">Hidden</span>\r\n");
#nullable restore
#line 87 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </td>\r\n                                </tr>\r\n");
#nullable restore
#line 90 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                        </tbody>\r\n                    </table>\r\n                </div>\r\n");
#nullable restore
#line 94 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
            }
            else
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <p class=\"text-center text-muted\">No products found.</p>\r\n");
#nullable restore
#line 98 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        </div>
    </div>
</div>

<script>
    function showMessage(message, type = 'info') {
        const messageDiv = document.getElementById('statusMessage');
        const contentDiv = document.getElementById('statusContent');

        messageDiv.className = `alert alert-${type}`;
        messageDiv.style.display = 'block';
        contentDiv.innerHTML = message;

        // Auto-hide after 5 seconds
        setTimeout(() => {
            messageDiv.style.display = 'none';
        }, 5000);
    }

    function exportToXML() {
        const button = event.target;
        button.disabled = true;
        button.textContent = 'Exporting...';

        fetch('");
#nullable restore
#line 123 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
          Write(Url.Action("ExportToXML", "ImportExport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message, 'success');
            } else {
                showMessage(data.message, 'danger');
            }
        })
        .catch(error => {
            showMessage('Export failed: ' + error.message, 'danger');
        })
        .finally(() => {
            button.disabled = false;
            button.textContent = 'Export to XML';
        });
    }

    function handleFileSelect(input) {
        const fileInfo = document.getElementById('selectedFileInfo');
        const fileName = document.getElementById('selectedFileName');

        if (input.files && input.files[0]) {
            fileName.textContent = input.files[0].name;
            fileInfo.style.display = 'block';
        } else {
            fileInfo.style.display = 'none';
        }
");
            WriteLiteral(@"    }

    function clearFileSelection() {
        document.getElementById('xmlFileInput').value = '';
        document.getElementById('selectedFileInfo').style.display = 'none';
    }

    function importFromXML() {
        const button = event.target;
        const fileInput = document.getElementById('xmlFileInput');

        if (!fileInput.files || !fileInput.files[0]) {
            showMessage('Please select a file first', 'warning');
            return;
        }

        button.disabled = true;
        button.textContent = 'Importing...';

        const formData = new FormData();
        formData.append('xmlFile', fileInput.files[0]);

        fetch('");
#nullable restore
#line 176 "C:\Users\Gloreanne\source\repos\Ecom\Ecom\Views\ImportExport\Index.cshtml"
          Write(Url.Action("ImportFromXML", "ImportExport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(data.message, 'success');
                clearFileSelection();
                // Reload page after 2 seconds
                setTimeout(() => window.location.reload(), 2000);
            } else {
                showMessage(data.message, 'danger');
            }
        })
        .catch(error => {
            showMessage('Import failed: ' + error.message, 'danger');
        })
        .finally(() => {
            button.disabled = false;
            button.textContent = 'Import Now';
        });
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Product>> Html { get; private set; }
    }
}
#pragma warning restore 1591
