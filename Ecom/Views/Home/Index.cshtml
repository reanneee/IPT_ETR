@model List<Product>
@{
    ViewData["Title"] = "Plant Store - Happiness blooms from within";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
        }

        .hero-section {
            background: linear-gradient(135deg, #2d5a4e 0%, #1e3d35 100%);
            color: white;
            padding: 80px 0;
            position: relative;
            overflow: hidden;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            bottom: 20px;
            right: 80px;
            width: 100px;
            height: 60px;
            background-image:
                radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 2px, transparent 2px),
                radial-gradient(circle at 40% 40%, rgba(255,255,255,0.1) 2px, transparent 2px),
                radial-gradient(circle at 60% 20%, rgba(255,255,255,0.1) 2px, transparent 2px),
                radial-gradient(circle at 80% 40%, rgba(255,255,255,0.1) 2px, transparent 2px);
            background-size: 20px 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .hero-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 60px;
            align-items: center;
        }

        .hero-text h1 {
            font-size: 3.5rem;
            font-weight: 300;
            line-height: 1.2;
            margin-bottom: 20px;
            letter-spacing: -1px;
        }

        .hero-text p {
            font-size: 1.1rem;
            margin-bottom: 40px;
            opacity: 0.9;
            line-height: 1.6;
        }

        .hero-buttons {
            display: flex;
            gap: 20px;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
            display: inline-block;
        }

        .btn-primary {
            background: white;
            color: #2d5a4e;
        }

        .btn-secondary {
            background: transparent;
            color: white;
            border: 2px solid rgba(255,255,255,0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .hero-cards {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .plant-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
            transition: transform 0.3s ease;
        }

        .plant-card:hover {
            transform: translateY(-5px);
        }

        .plant-card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }

        .card-tag {
            position: absolute;
            top: 12px;
            left: 12px;
            background: #2d5a4e;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .featured-card {
            grid-row: span 2;
            background: linear-gradient(135deg, rgba(45,90,78,0.8), rgba(30,61,53,0.9)), url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200"><rect fill="%23e8f4f0" width="200" height="200"/><path fill="%23a8d5c8" d="M100 20c44.2 0 80 35.8 80 80s-35.8 80-80 80-80-35.8-80-80 35.8-80 80-80z"/></svg>');
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 20px;
        }

        .featured-card h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
        }

        .featured-card p {
            font-size: 0.9rem;
            opacity: 0.9;
            margin-bottom: 20px;
        }

        .read-more-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            padding: 8px 20px;
            border-radius: 25px;
            border: 1px solid rgba(255,255,255,0.3);
            cursor: pointer;
            font-size: 0.9rem;
            align-self: flex-start;
        }

        .featured-section {
            padding: 80px 0;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 50px;
        }

        .section-header h2 {
            font-size: 2.5rem;
            font-weight: 300;
            color: #2d5a4e;
        }

        .view-all {
            color: #666;
            text-decoration: none;
            font-size: 1.1rem;
            transition: color 0.3s ease;
        }

        .view-all:hover {
            color: #2d5a4e;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 30px;
            position: relative;
        }

        .product-card {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

        .product-image {
            height: 250px;
            background-size: cover;
            background-position: center;
            position: relative;
            background-color: #f0f4f3;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .product-image .placeholder-icon {
            font-size: 4rem;
            color: #a8d5c8;
        }

        .product-info {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .product-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2d5a4e;
        }

        .product-description {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 12px;
            flex-grow: 1;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .product-footer {
            margin-top: auto;
        }

        .product-price-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .product-price {
            font-size: 1.3rem;
            font-weight: 700;
            color: #2d5a4e;
        }

        .product-category {
            background: rgba(45,90,78,0.1);
            color: #2d5a4e;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .product-stock {
            font-size: 0.8rem;
            color: #666;
            margin-bottom: 15px;
        }

        .stock-low {
            color: #e74c3c;
            font-weight: 600;
        }

        .stock-out {
            color: #c0392b;
            font-weight: 700;
        }

        .product-actions {
            display: flex;
            gap: 10px;
        }

        .buy-btn {
            background: #2d5a4e;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
            text-decoration: none;
            text-align: center;
        }

        .buy-btn:hover {
            background: #1e3d35;
            transform: translateY(-1px);
            color: white;
        }

        .buy-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .details-btn {
            background: transparent;
            color: #2d5a4e;
            padding: 10px 16px;
            border: 2px solid #2d5a4e;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .details-btn:hover {
            background: #2d5a4e;
            color: white;
            transform: translateY(-1px);
        }

        .empty-state {
            text-align: center;
            padding: 80px 20px;
            color: #666;
        }

        .empty-state .icon {
            font-size: 4rem;
            color: #a8d5c8;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #2d5a4e;
        }

        .creation-date {
            font-size: 0.75rem;
            color: #999;
            margin-top: 5px;
        }

        @@media (max-width: 768px) {
            .hero-content {
                grid-template-columns: 1fr;
                gap: 40px;
            }

            .hero-text h1 {
                font-size: 2.5rem;
            }

            .hero-cards {
                grid-template-columns: 1fr;
            }

            .products-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
            }

            .hero-buttons {
                flex-direction: column;
                align-items: flex-start;
            }

            .product-actions {
                flex-direction: column;
            }

            .product-price-row {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }
        }
    </style>
</head>
<body>
    <section class="hero-section">
        <div class="container">
            <div class="hero-content">
                <div class="hero-text">
                    <h1>Happiness blooms from within</h1>
                    <p>Our environment, the world in which we live and work, is a mirror of our attitudes and expectations.</p>
                    <div class="hero-buttons">
                        <a href="#featured" class="btn btn-primary">Shop now</a>
                        <a href="#" class="btn btn-secondary">Explore plants →</a>
                    </div>
                </div>
                <div class="hero-cards">
                    @if (Model.Any())
                    {
                        var firstProduct = Model.First();
                        <div class="plant-card">
                            <div class="card-tag">New</div>
                            @if (!string.IsNullOrEmpty(firstProduct.Image))
                            {
                                <img src="@firstProduct.Image" alt="@firstProduct.ProductName">
                            }
                            else
                            {
                                <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%23f0f4f3' width='200' height='150'/><ellipse fill='%234a7c59' cx='100' cy='120' rx='40' ry='20'/><path fill='%236b9b6b' d='M80 100c0-20 10-35 25-35s25 15 25 35v20h-50v-20z'/></svg>" alt="Plant">
                            }
                        </div>

                        @if (Model.Count > 1)
                        {
                            var secondProduct = Model.Skip(1).First();
                            <div class="plant-card">
                                <div class="card-tag">Popular</div>
                                @if (!string.IsNullOrEmpty(secondProduct.Image))
                                {
                                    <img src="@secondProduct.Image" alt="@secondProduct.ProductName">
                                }
                                else
                                {
                                    <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%23f5f3f0' width='200' height='150'/><circle fill='%23ff6b6b' cx='100' cy='80' r='20'/><path fill='%234a7c59' d='M85 75c0-10 5-15 10-15s10 5 10 15'/></svg>" alt="Plant">
                                }
                            </div>
                        }
                        else
                        {
                            <div class="plant-card">
                                <div class="card-tag">Popular</div>
                                <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%23f5f3f0' width='200' height='150'/><circle fill='%23ff6b6b' cx='100' cy='80' r='20'/></svg>" alt="Popular plant">
                            </div>
                        }
                    }
                    else
                    {
                        <div class="plant-card">
                            <div class="card-tag">New</div>
                            <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%23f0f4f3' width='200' height='150'/><ellipse fill='%234a7c59' cx='100' cy='120' rx='40' ry='20'/></svg>" alt="New plant">
                        </div>
                        <div class="plant-card">
                            <div class="card-tag">Popular</div>
                            <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%23f5f3f0' width='200' height='150'/><circle fill='%23ff6b6b' cx='100' cy='80' r='20'/></svg>" alt="Popular plant">
                        </div>
                    }

                    <div class="plant-card featured-card">
                        <div class="card-tag">Featured</div>
                        <h3>Anthurium Flower</h3>
                        <p>The flower of human being. It has meaning of feel that the plant always grow whatever season and weather.</p>
                        <button class="read-more-btn">READ MORE</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="featured-section" id="featured">
        <div class="container">
            <div class="section-header">
                <h2>Featured Products</h2>
                <a href="#" class="view-all">view all</a>
            </div>

            @if (Model.Any())
            {
                <div class="products-grid">
                    @foreach (var product in Model)
                    {
                        <div class="product-card">
                            <div class="product-image">
                                @if (!string.IsNullOrEmpty(product.Image))
                                {
                                    <img src="@product.Image" alt="@product.ProductName" />
                                }
                                else
                                {
                                    <div class="placeholder-icon">🌿</div>
                                }
                            </div>
                            <div class="product-info">
                                <h3 class="product-name">@product.ProductName</h3>
                                <p class="product-description">
                                    @if (!string.IsNullOrEmpty(product.Description))
                                    {
                                        @product.Description
                                    }
                                    else
                                    {
                                        <text>A beautiful plant for your home or office.</text>
                                    }
                                </p>

                                <div class="product-footer">
                                    <div class="product-price-row">
                                        <div class="product-price">$@product.Price.ToString("F2")</div>
                                        @if (!string.IsNullOrEmpty(product.CategoryName))
                                        {
                                            <div class="product-category">@product.CategoryName</div>
                                        }
                                    </div>

                                    <div class="product-stock">
                                        @if (product.Stock <= 0)
                                        {
                                            <span class="stock-out">Out of Stock</span>
                                        }
                                        else if (product.Stock <= 5)
                                        {
                                            <span class="stock-low">Only @product.Stock left!</span>
                                        }
                                        else
                                        {
                                            <span>@product.Stock in stock</span>
                                        }
                                    </div>


                                    <div class="product-actions">
                                        @if (product.Stock > 0)
                                        {
                                            <button class="buy-btn" onclick="addToCart(@product.ProductID)">Add to Cart</button>
                                        }
                                        else
                                        {
                                            <button class="buy-btn" disabled>Out of Stock</button>
                                        }
                                        <a asp-controller="Product" asp-action="Details" asp-route-id="@product.ProductID" class="details-btn">Details</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="icon">📦</div>
                    <h3>No products available</h3>
                    <p>Check back later for new arrivals!</p>
                </div>
            }
        </div>
    </section>

    <script>function addToCart(productId) {
            // Immediately increment the cart count for instant feedback
            if (typeof incrementCartCount === 'function') {
                incrementCartCount();
            }

            // Show visual feedback on the cart icon
            if (typeof showCartAddedFeedback === 'function') {
                showCartAddedFeedback();
            }

            fetch('/Cart/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ productId: productId, quantity: 1 })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Show success notification
                        showNotification('Product added to cart successfully!', 'success');

                        // Update cart count with actual server response (in case our increment was wrong)
                        if (data.cartCount !== undefined && typeof updateCartCount === 'function') {
                            // Set the exact count from server
                            if (cartManager) {
                                cartManager.setBadgeCount(data.cartCount);
                            }
                        }
                    } else {
                        // If server request failed, we need to decrement back
                        if (typeof cartManager !== 'undefined' && cartManager) {
                            const currentCount = parseInt(cartManager.badge.textContent) || 0;
                            cartManager.setBadgeCount(Math.max(0, currentCount - 1));
                        }
                        showNotification('Error adding product to cart: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);

                    // If request failed, we need to decrement back
                    if (typeof cartManager !== 'undefined' && cartManager) {
                        const currentCount = parseInt(cartManager.badge.textContent) || 0;
                        cartManager.setBadgeCount(Math.max(0, currentCount - 1));
                    }

                    showNotification('Error adding product to cart. Please try again.', 'error');
                });
        }

        // Better notification function instead of alert
        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;

            if (type === 'success') {
                notification.style.backgroundColor = '#2d5a4e';
            } else {
                notification.style.backgroundColor = '#e74c3c';
            }

            notification.textContent = message;
            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);

            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Smooth scrolling for hero buttons
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Add hover effects to product cards
            const productCards = document.querySelectorAll('.product-card');
            productCards.forEach(card => {
                card.addEventListener('mouseenter', function () {
                    this.style.transform = 'translateY(-8px)';
                });

                card.addEventListener('mouseleave', function () {
                    this.style.transform = 'translateY(0)';
                });
            });
        });
    </script>
</body>
</html>